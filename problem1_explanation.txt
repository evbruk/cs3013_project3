We approached Problem 1 by using mutexes/condition variables to solve it. We created individual threads for each dog and cat in order to keep track of which thread was running and what actions it was doing. The thread includes a name for each animal so that it can identify itself. We also created a lock for the kitchen. The first thread, either a cat or dog, to run through the kitchen will check to see who the owner of the kitchen is. Since they are the first one, they will be allowed to enter and the owner will be set to their animal type. Then it will check to see how many bowls are available to drink from. At first both will be available so it will start drinking, when the thread will sleep for a certain amount of time, and will make one less bowl available. The lock will be locked right before it sleeps to ensure no other animal will drink from the same bowl, and then once it is done sleeping, it will unlock. The program keeps track of how many animals have drank with a variable. Once 2 have drank, the owner of the room is switched to the opposite animal type and a condition variable is sent out to all of the waiting threads. As all of the threads run, each one will check for the owner of the kitchen and only enter if it is its own animal type. A thread can be placed in the waiting state by attempting to enter the kitchen while the opposite animal type is the owner, for example if a cat tries to enter while the dogs own it, it will be set to a waiting condition. 

Every time the owner of the kitchen is swithed the global varibale of how many animals have drank is reset to 0, and the new animal type goes through the same cycle. This ensures fairness, because only two animals should have the ability to drink in the kitchen before the kitchen owner switches.

The program will run indefinetly until it is manually killed. 
